import React, { useState, useEffect } from 'react';
import { Send, Loader2, AlertCircle, FolderTree, CheckSquare, Square } from 'lucide-react';

interface ScanResult {
  id: string;
  state: string;
  result: any;
  progress: number;
}

// Common Nuclei template categories
const TEMPLATE_CATEGORIES = [
  { id: 'cves', name: 'CVEs', description: 'Common Vulnerabilities and Exposures' },
  { id: 'vulnerabilities', name: 'Vulnerabilities', description: 'General security vulnerabilities' },
  { id: 'exposures', name: 'Exposures', description: 'Information exposures and leaks' },
  { id: 'technologies', name: 'Technologies', description: 'Technology detection templates' },
  { id: 'misconfiguration', name: 'Misconfigurations', description: 'Security misconfigurations' },
  { id: 'workflows', name: 'Workflows', description: 'Multi-step vulnerability workflows' },
  { id: 'default-logins', name: 'Default Logins', description: 'Default credential checks' },
  { id: 'exposed-panels', name: 'Exposed Panels', description: 'Exposed admin/service panels' },
  { id: 'takeovers', name: 'Takeovers', description: 'Subdomain takeover templates' },
  { id: 'file-upload', name: 'File Upload', description: 'File upload vulnerability checks' },
  { id: 'iot', name: 'IoT', description: 'Internet of Things vulnerabilities' },
];

function App() {
  const [target, setTarget] = useState('');
  const [selectedTemplates, setSelectedTemplates] = useState<string[]>(['cves', 'vulnerabilities']);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [jobId, setJobId] = useState('');
  const [scanResult, setScanResult] = useState<ScanResult | null>(null);
  const [useAllTemplates, setUseAllTemplates] = useState(false);

  const startScan = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    
    try {
      const response = await fetch('http://localhost:3000/api/scan', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        },
        body: JSON.stringify({
          target,
          templates: useAllTemplates ? ['.'] : selectedTemplates.map(t => `${t}/`)
        })
      });

      if (!response.ok) {
        throw new Error('Failed to start scan');
      }

      const data = await response.json();
      setJobId(data.jobId);
      checkStatus(data.jobId);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to start scan');
    } finally {
      setLoading(false);
    }
  };

  const checkStatus = async (id: string) => {
    try {
      const response = await fetch(`http://localhost:3000/api/scan/${id}`, {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        }
      });

      if (!response.ok) {
        throw new Error('Failed to check status');
      }

      const result = await response.json();
      setScanResult(result);

      if (result.state === 'active' || result.state === 'waiting') {
        setTimeout(() => checkStatus(id), 2000);
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to check status');
    }
  };

  const toggleTemplate = (templateId: string) => {
    if (useAllTemplates) {
      setUseAllTemplates(false);
    }
    setSelectedTemplates(prev => 
      prev.includes(templateId)
        ? prev.filter(t => t !== templateId)
        : [...prev, templateId]
    );
  };

  const toggleAllTemplates = () => {
    setUseAllTemplates(!useAllTemplates);
    if (!useAllTemplates) {
      setSelectedTemplates([]);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 to-gray-800 text-white p-8">
      <div className="max-w-3xl mx-auto">
        <h1 className="text-4xl font-bold mb-8 text-center">Nuclei Scanner</h1>
        
        <div className="bg-gray-800 rounded-lg p-6 shadow-xl mb-8">
          <form onSubmit={startScan} className="space-y-6">
            <div>
              <label className="block text-sm font-medium mb-2">Target URL</label>
              <input
                type="url"
                value={target}
                onChange={(e) => setTarget(e.target.value)}
                placeholder="https://example.com"
                className="w-full px-4 py-2 rounded bg-gray-700 border border-gray-600 focus:border-blue-500 focus:ring-1 focus:ring-blue-500"
                required
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium mb-3">
                <div className="flex items-center gap-2">
                  <FolderTree className="w-4 h-4" />
                  Select Templates
                </div>
              </label>

              {/* All Templates Option */}
              <div 
                className={`p-3 rounded border cursor-pointer transition-colors mb-3 ${
                  useAllTemplates
                    ? 'bg-blue-900/30 border-blue-500'
                    : 'bg-gray-700/30 border-gray-600 hover:border-gray-500'
                }`}
                onClick={toggleAllTemplates}
              >
                <div className="font-medium flex items-center gap-2">
                  {useAllTemplates ? <CheckSquare className="w-4 h-4" /> : <Square className="w-4 h-4" />}
                  All Templates
                </div>
                <div className="text-sm text-gray-400">Run scan with all available Nuclei templates</div>
              </div>

              <div className={`grid grid-cols-1 md:grid-cols-2 gap-3 ${useAllTemplates ? 'opacity-50 pointer-events-none' : ''}`}>
                {TEMPLATE_CATEGORIES.map(template => (
                  <div
                    key={template.id}
                    className={`p-3 rounded border cursor-pointer transition-colors ${
                      selectedTemplates.includes(template.id)
                        ? 'bg-blue-900/30 border-blue-500'
                        : 'bg-gray-700/30 border-gray-600 hover:border-gray-500'
                    }`}
                    onClick={() => toggleTemplate(template.id)}
                  >
                    <div className="font-medium">{template.name}</div>
                    <div className="text-sm text-gray-400">{template.description}</div>
                  </div>
                ))}
              </div>
              {!useAllTemplates && selectedTemplates.length === 0 && (
                <p className="text-yellow-500 text-sm mt-2">Please select at least one template or use all templates</p>
              )}
            </div>

            <button
              type="submit"
              disabled={loading || (!useAllTemplates && selectedTemplates.length === 0)}
              className="w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded flex items-center justify-center gap-2 disabled:opacity-50"
            >
              {loading ? (
                <><Loader2 className="w-5 h-5 animate-spin" /> Scanning...</>
              ) : (
                <><Send className="w-5 h-5" /> Start Scan</>
              )}
            </button>
          </form>
        </div>

        {error && (
          <div className="bg-red-900/50 border border-red-700 rounded-lg p-4 mb-8 flex items-center gap-3">
            <AlertCircle className="w-5 h-5 text-red-400" />
            <p className="text-red-200">{error}</p>
          </div>
        )}

        {scanResult && (
          <div className="bg-gray-800 rounded-lg p-6 shadow-xl">
            <h2 className="text-xl font-semibold mb-4">Scan Results</h2>
            <div className="space-y-2">
              <p><span className="text-gray-400">Job ID:</span> {scanResult.id}</p>
              <p><span className="text-gray-400">Status:</span> {scanResult.state}</p>
              <p><span className="text-gray-400">Progress:</span> {scanResult.progress}%</p>
              
              {scanResult.result && (
                <div className="mt-4">
                  <h3 className="text-lg font-medium mb-2">Findings</h3>
                  <pre className="bg-gray-900 p-4 rounded overflow-auto">
                    {JSON.stringify(scanResult.result, null, 2)}
                  </pre>
                </div>
              )}
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

export default App;